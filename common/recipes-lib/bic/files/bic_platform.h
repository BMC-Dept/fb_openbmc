/*
 *
 * Copyright 2015-present Facebook. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#ifndef _BIC_PLATFORM_H_
#define _BIC_PLATFORM_H_
#include <stdint.h>

/* NOTE:
 * Contents of this file is provided as an example only. Each
 * platform must override this file to provide platform specific
 * information. This fill will showcase the most complicated usecase
 * as in a multi-node server. It should be a lot easier for single
 * node servers
 */

#define MAX_GPIO_PINS     64
#define MAX_POSTCODE_NUM  1024

// GPIO PINS
enum {
  PWRGD_COREPWR = 0x0,
  PWRGD_PCH_PWROK,
  PVDDR_AB_VRHOT_N,
  PVDDR_DE_VRHOT_N,
  PVCCIN_VRHOT_N,
  FM_THROTTLE_N,
  FM_PCH_BMC_THERMTRIP_N,
  H_MEMHOT_CO_N,
  FM_CPU0_THERMTRIP_LVT3_N,
  CPLD_PCH_THERMTRIP,
  FM_CPLD_FIVR_FAULT,
  FM_CPU_CATERR_N,
  FM_CPU_ERROR_2,
  FM_CPU_ERROR_1,
  FM_CPU_ERROR_0,
  FM_SLPS4_N,
  FM_NMI_EVENT_BMC_N,
  FM_SMI_BMC_N,
  PLTRST_N,
  FP_RST_BTN_N,
  RST_BTN_BMC_OUT_N,
  FM_BIOS_POST_COMPT_N,
  FM_SLPS3_N,
  PWRGD_PVCCIN,
  FM_BACKUP_BIOS_SEL_N,
  FM_EJECTOR_LATCH_DETECT_N,
  BMC_RESET,
  FM_JTAG_BIC_TCK_MUX_SEL_N,
  BMC_READY_N,
  BMC_COM_SW_N,
  RST_I2C_MUX_N,
  XDP_BIC_PREQ_N,
  XDP_BIC_TRST,
  FM_SYS_THROTTLE_LVC3,
  XDP_BIC_PRDY_N,
  XDP_PRSNT_IN_N,
  XDP_PRSNT_OUT_N,
  XDP_BIC_PWR_DEBUG_N,
  FM_BIC_JTAG_SEL_N,
  FM_PCIE_BMC_RELINK_N,
  FM_DISABLE_PCH_VR,
  FM_BIC_RST_RTCRST,
  FM_BIC_ME_RCVR,
  RST_RSMRST_PCH_N,
};

// RC GPIO PINS
enum {
  RC_PWRGD_PS_PWROK,
  RC_QDF_PS_HOLD_OUT,
  RC_PVDDQ_510_VRHOT_N_R1,
  RC_PVDDQ_423_VRHOT_N_R1,
  RC_VR_I2C_SEL,
  RC_QDF_THROTTLE_3P3_N,
  RC_QDF_FORCE_PMIN,
  RC_QDF_FORCE_PSTATE,
  RC_QDF_TEMPTRIP_N,
  RC_FAST_THROTTLE_N,
  RC_QDF_LIGHT_THROTTLE_3P3_N,
  RC_UEFI_DB_MODE_N,
  RC_QDF_RAS_ERROR_2,
  RC_QDF_RAS_ERROR_1,
  RC_QDF_RAS_ERROR_0,
  RC_SPI_MUX_SEL,
  RC_QDF_NMI,
  RC_QDF_SMI,
  RC_QDF_RES_OUT_N_R,
  RC_SYS_BUF_RST_N,
  RC_SYS_BIC_RST_N,
  RC_FM_BIOS_POST_CMPLT_N,
  RC_IMC_RDY,
  RC_PWRGD_SYS_PWROK,
  RC_FM_BACKUP_BIOS_SEL_N,
  RC_T32_JTAG_DET,
  RC_BB_BMC_RST_N,
  RC_QDF_PRSNT_0_N,
  RC_QDF_PRSNT_1_N,
  RC_EJCT_DET_N,
  RC_M2_I2C_MUX_RST_N,
  RC_BIC_REMOTE_SRST_N,
  RC_BIC_DB_TRST_N,
  RC_IMC_BOOT_ERROR,
  RC_BIC_RDY,
  RC_QDF_PROCHOT_N,
  RC_PWR_BIC_BTN_N,
  RC_PWR_BTN_BUF_N,
  RC_PMF_REBOOT_REQ_N,
  RC_BIC_BB_I2C_ALERT,
};

// EP GPIO PINS
enum {
  EP_PWRGD_COREPWR,
  EP_PWRGD_SYS_PWROK,
  EP_PWRGD_PS_PWROK_PLD,
  EP_PVCCIN_VRHOT_N,
  EP_H_MEMHOT_CO_N,
  EP_FM_CPLD_BIC_THERMTRIP_N,
  EP_FM_CPU_ERROR_2,
  EP_FM_CPU_ERROR_1,
  EP_FM_CPU_ERROR_0,
  EP_FM_NMI_EVENT_BMC_N,
  EP_FM_CRASH_DUMP_M3_N,
  EP_FP_RST_BTN_N,
  EP_FP_RST_BTN_OUT_N,
  EP_FM_BIOS_POST_COMPT_N,
  EP_FM_BACKUP_BIOS_SEL_N,
  EP_FM_EJECTOR_LATCH_DETECT_N,
  EP_BMC_RESET,
  EP_FM_SMI_BMC_N,
  EP_PLTRST_N,
  EP_TMP_ALERT,
  EP_RST_I2C_MUX_N,
  EP_XDP_BIC_TRST,
  EP_SMB_BMC_ALERT_N,
  EP_FM_CPLD_BIC_M3_HB,
  EP_IRQ_MEM_SOC_VRHOT_N,
  EP_FM_CRASH_DUMP_V8_N,
  EP_FM_M3_ERR_N,
  EP_FM_CPU_CATERR_LVT3_N,
  EP_BMC_READY_N,
  EP_BMC_COM_SW_N,
  EP_BMC_HB_LED_N,
  EP_FM_VR_FAULT_N,
  EP_IRQ_CPLD_BIC_PROCHOT_N,
  EP_FM_SMB_VR_SOC_MUX_EN,
};

// GPv2 GPIO PINS
enum {
  GPV2_BIC_HB_LED_N,
  GPV2_I2C_PESW_MULTI_CONFIG_ADDR0_R,
  GPV2_I2C_PESW_MULTI_CONFIG_ADDR1_R,
  GPV2_I2C_PESW_MULTI_CONFIG_ADDR2_R,
  GPV2_I2C_PESW_MULTI_CONFIG_ADDR3_R,
  GPV2_I2C_PESW_MULTI_CONFIG_ADDR4_R,
  GPV2_SMB_BIC_3V3SB_READY_N_R,
  GPV2_P3V3_DEV0_EN,
  GPV2_P3V3_DEV1_EN,
  GPV2_P3V3_DEV2_EN,
  GPV2_P3V3_DEV3_EN,
  GPV2_P3V3_DEV4_EN,
  GPV2_P3V3_DEV5_EN,
  GPV2_P3V3_DEV6_EN,
  GPV2_P3V3_DEV7_EN,
  GPV2_P3V3_DEV8_EN,
  GPV2_P3V3_DEV9_EN,
  GPV2_P3V3_DEV10_EN,
  GPV2_P3V3_DEV11_EN,
  GPV2_PWRGD_P3V3_DEV0,
  GPV2_PWRGD_P3V3_DEV1,
  GPV2_PWRGD_P3V3_DEV2,
  GPV2_PWRGD_P3V3_DEV3,
  GPV2_PWRGD_P3V3_DEV4,
  GPV2_PWRGD_P3V3_DEV5,
  GPV2_PWRGD_P3V3_DEV6,
  GPV2_PWRGD_P3V3_DEV7,
  GPV2_PWRGD_P3V3_DEV8,
  GPV2_PWRGD_P3V3_DEV9,
  GPV2_PWRGD_P3V3_DEV10,
  GPV2_PWRGD_P3V3_DEV11,
  GPV2_FM_COM_EN_N_R,
  GPV2_FM_COM_SEL_0_R,
  GPV2_FM_COM_SEL_1_R,
  GPV2_FM_COM_SEL_2_R,
  GPV2_FM_COM_SEL_3_R,
  GPV2_FM_JTAG_EN_N_R,
  GPV2_FM_JTAG_SEL_0_R,
  GPV2_FM_JTAG_SEL_1_R,
  GPV2_FM_JTAG_SEL_2_R,
  GPV2_FM_JTAG_SEL_3_R,
  GPV2_BIC_REMOTE_DEBUG_SELECT_N,
  GPV2_RST_I2C_MUX1_N_R,
  GPV2_RST_I2C_MUX2_N_R,
  GPV2_RST_I2C_MUX3_N_R,
  GPV2_RST_I2C_MUX4_N_R,
  GPV2_RST_I2C_MUX5_N_R,
  GPV2_RST_I2C_MUX6_N_R,
  GPV2_FM_BIC_DU_DEV0_EN_R,
  GPV2_FM_BIC_DU_DEV1_EN_R,
  GPV2_FM_BIC_DU_DEV2_EN_R,
  GPV2_FM_BIC_DU_DEV3_EN_R,
  GPV2_FM_BIC_DU_DEV4_EN_R,
  GPV2_FM_BIC_DU_DEV5_EN_R,
  GPV2_FM_BIC_DU_DEV6_EN_R,
  GPV2_FM_BIC_DU_DEV7_EN_R,
  GPV2_FM_BIC_DU_DEV8_EN_R,
  GPV2_FM_BIC_DU_DEV9_EN_R,
  GPV2_FM_BIC_DU_DEV10_EN_R,
  GPV2_FM_BIC_DU_DEV11_EN_R,
  GPV2_FM_POWER_EN,
  GPV2_BIC_BOARD_ID_0,
  GPV2_BIC_BOARD_ID_1,
  GPV2_BIC_BOARD_ID_2,
};

// ND GPIO PINS
enum {
  ND_PWRGD_CPU0_LVC3,
  ND_PWRGD_SYS_PWROK_R,
  ND_IRQ_PVDDIO_ABCD_VRHOT_N,
  ND_IRQ_PVDDIO_EFGH_VRHOT_N,
  ND_IRQ_TMP_ALERT_N,
  ND_FM_THROTTLE_N,
  ND_IRQ_VDDCR_CPU_VRHOT_N,
  ND_IRQ_VDDCR_SOC_VRHOT_N,
  ND_FM_CPU_BMC_THERMTRIP_N,
  ND_SMB_BIC_3V3SB_READY_N,
  ND_IRQ_P0_ALERT_N,
  ND_FM_PVDDIO_ABCD_SMB_ALERT_N,
  ND_IRQ_VDDCR_CPU_ALERT_N,
  ND_IRQ_VDDCR_SOC_ALERT_N,
  ND_FM_PVDDIO_EFGH_SMB_ALERT_N,
  ND_FM_SMI_ACTIVE_N,
  ND_FM_FAST_THROTTLE_N,
  ND_IRQ_BIC_CPU_SMI_LPC_R_N,
  ND_PLTRST_N,
  ND_BB_RST_BTN_BUF_N,
  ND_RST_BMC_RSTBTN_OUT_N,
  ND_FM_BIOS_POST_COMPT_N,
  ND_FM_SLP_S3_N,
  ND_PWRGD_PS_PWROK_PLD,
  ND_SPI_SW_SELECT,
  ND_FM_EJECTOR_LATCH_DETECT_N,
  ND_BMC_RESET_IN,
  ND_BIC_COM_SW2_N,
  ND_BMC_READY,
  ND_BIC_COM_SW1_N,
  ND_RST_I2C_M2_MUX_N,
  ND_BIC_REMOTEJTAG_EN_N,
  ND_JTAG_BIC_TRST,
  ND_FM_SYS_THROTTLE_LVC3,
  ND_IRQ_PMBUS_ALERT_N,
  ND_IRQ_M2_3V3_ALERT_N,
  ND_FM_BMC_PWR_BTN_OUT_N,
  ND_HDT_BIC_DBREQ_L,
  ND_M_ABCD_EVENT_BUF_N,
  ND_M_EFGH_EVENT_BUF_N,
  ND_BB_PWR_BTN_BUF_N,
  ND_RST_BIC_RTCRST,
  ND_FM_BIOS_RCVR,
  ND_RST_RSMRST_P0_BUF_N,
  ND_FM_PWR_LED_N,
  ND_FM_FAULT_LED_N,
  ND_FM_BIC_READ_SPD,
  ND_FM_CPU_CATERR_N,
};

enum {
  FW_CPLD = 1,
  FW_BIC,
  FW_ME,
  FW_BIC_BOOTLOADER,
  FW_PVCCIO_VR,
  FW_PVCCIN_VR,
  FW_PVCCSA_VR,
  FW_DDRAB_VR,
  FW_DDRDE_VR,
  FW_PVNNPCH_VR,
  FW_P1V05_VR,
};

// RC
enum {
  FW_IMC = 3,
  FW_VDD_APC_CBF_VR = 5,
  FW_DDR510_VR = 6,
  FW_DDR423_VR = 7,
};

// EP
enum {
  FW_M3 = 3,
  FW_VDD_CORE_VR = 5,
  FW_VDD_SRAM_VR = 6,
  FW_VDD_MEM_VR = 7,
  FW_VDD_SOC_VR = 8,
  FW_DDR_AG_VR = 9,
  FW_DDR_BH_VR = 10,
};

// GPv2
enum {
  FW_3V3_VR = 5,
  FW_0V92 = 6,
  FW_PCIE_SWITCH = 7,
};

// ND
enum {
  FW_BOOTLOADER = 3,
  FW_PVDDCR_CPU_VR = 4,
  FW_PVDDCR_SOC_VR = 5,
  FW_PVDDIO_ABCD_VR = 6,
  FW_PVDDIO_EFGH_VR = 7,
};

enum {
  FW_PCIE_SWITCH_STAT_IDLE = 0,
  FW_PCIE_SWITCH_STAT_INPROGRESS,
  FW_PCIE_SWITCH_STAT_DONE,
  FW_PCIE_SWITCH_STAT_ERROR = 0xFF,
};


#define NUM_SERVERS 4
const static uint8_t bic_server_fru[NUM_SERVERS] = {1,2,3,4};
const static uint8_t bic_slot_index[] = {-1, 0, 1, 2, 3}; // Poor man's has

// TODO FiX With correct names.
const static char *bic_ready_gpio[NUM_SERVERS] = {
  "GPIO_I2C_SLOT1_ALERT_N",
  "GPIO_I2C_SLOT2_ALERT_N",
  "GPIO_I2C_SLOT3_ALERT_N",
  "GPIO_I2C_SLOT4_ALERT_N"
};

// TODO Fix with correct names.
const static char *bic_12v_gpio[NUM_SERVERS] = {
  "GPIO_P12V_STBY_SLOT1_EN",
  "GPIO_P12V_STBY_SLOT2_EN",
  "GPIO_P12V_STBY_SLOT3_EN",
  "GPIO_P12V_STBY_SLOT4_EN"
};

// TODO Fix with correct names
const static char *bic_power_en_gpio[NUM_SERVERS] = {
  "GPIO_SLOT1_POWER_EN",
  "GPIO_SLOT2_POWER_EN",
  "GPIO_SLOT3_POWER_EN",
  "GPIO_SLOT4_POWER_EN"
};

const static int bic_ipmb_bus_id[NUM_SERVERS] = {1, 3, 5, 7};

// Zero on success.
int bic_image_validate(uint8_t slot_id, int fd, long size);

#endif
