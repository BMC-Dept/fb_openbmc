                  YAAP Server OpenBMC version v1.1.0
                  ---------------------------------

Copyright (C) 2012 - 2021 ADVANCED MICRO DEVICES, INC. All Rights Reserved.
AMD Confidential Proprietary

AMD is granting you permission to use this software (the Materials)
pursuant to the terms and conditions of your Software License Agreement
with AMD.  This header does *NOT* give you permission to use the Materials
or any rights under AMD's intellectual property.  Your use of any portion
of these Materials shall constitute your acceptance of those terms and
conditions.  If you do not agree to the terms and conditions of the Software
License Agreement, please do not use any portion of these Materials.

CONFIDENTIALITY:  The Materials and all other information, identified as
confidential and provided to you by AMD shall be kept confidential in
accordance with the terms and conditions of the Software License Agreement.

LIMITATION OF LIABILITY: THE MATERIALS AND ANY OTHER RELATED INFORMATION
PROVIDED TO YOU BY AMD ARE PROVIDED "AS IS" WITHOUT ANY EXPRESS OR IMPLIED
WARRANTY OF ANY KIND, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
MERCHANTABILITY, NONINFRINGEMENT, TITLE, FITNESS FOR ANY PARTICULAR PURPOSE,
OR WARRANTIES ARISING FROM CONDUCT, COURSE OF DEALING, OR USAGE OF TRADE.
IN NO EVENT SHALL AMD OR ITS LICENSORS BE LIABLE FOR ANY DAMAGES WHATSOEVER
(INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF PROFITS, BUSINESS
INTERRUPTION, OR LOSS OF INFORMATION) ARISING OUT OF AMD'S NEGLIGENCE,
GROSS NEGLIGENCE, THE USE OF OR INABILITY TO USE THE MATERIALS OR ANY OTHER
RELATED INFORMATION PROVIDED TO YOU BY AMD, EVEN IF AMD HAS BEEN ADVISED OF
THE POSSIBILITY OF SUCH DAMAGES.  BECAUSE SOME JURISDICTIONS PROHIBIT THE
EXCLUSION OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES,
THE ABOVE LIMITATION MAY NOT APPLY TO YOU.

AMD does not assume any responsibility for any errors which may appear in
the Materials or any other related information provided to you by AMD, or
result from use of the Materials or any related information.

You agree that you will not reverse engineer or decompile the Materials.

NO SUPPORT OBLIGATION: AMD is not obligated to furnish, support, or make any
further information, software, technical information, know-how, or show-how
available to you.  Additionally, AMD retains the right to modify the
Materials at any time, without notice, and is not obligated to provide such
modified Materials to you.

U.S. GOVERNMENT RESTRICTED RIGHTS: The Materials are provided with
"RESTRICTED RIGHTS." Use, duplication, or disclosure by the Government is
subject to the restrictions as set forth in FAR 52.227-14 and
DFAR252.227-7013, et seq., or its successor.  Use of the Materials by the
Government constitutes acknowledgement of AMD's proprietary rights in them.

EXPORT ASSURANCE:  You agree and certify that neither the Materials, nor any
direct product thereof will be exported directly or indirectly, into any
country prohibited by the United States Export Administration Act and the
regulations thereunder, without the required authorization from the U.S.
government nor will be used for any purpose prohibited by the same.

-----------------------------------------------------------------------------------
QUICKSTART
-----------------------------------------------------------------------------------

This software comprises the YAAP RPC server core software.  It is intended to be mated
with appropriate system initialization and hardware abstraction code in order to 
implement a YAAP-compatible hardware debug system for AMD silicon.  The code is 
documented via Doxygen comments, and the generated documentation can can be viewed as
described below:

  For the full documentation:
    - Open 'Source/Shared/dox/html/index.html' in your web browser, or
    - Open 'refman_full.pdf' in a PDF reader
  For the subset of documentation covering the HAL:
    - Open 'Source/Shared/dox.hal/html/index.html' in your web browser, or
    - Open 'refman_hal.pdf' in a PDF reader

A bmc implementation is included that will compile on Linux systems.  This 
implementation can be built from the "Linux" directory:

  $ cd Linux/bmc
  $ make

This results in an executable 'yaapd', placed in that directory.  Running it will
print a log of the startup of the daemon to stdout, and will end with a message
indicating that the server has opened port 6123 and is listening for YAAP connections.

YAAP server implementations can follow the model of the provided sample.  
Each implementation must include appropriate low-level drivers (i.e. implementations 
of the appropriate interfaces from the yaap::hal namespace) and system/board
initialization code.  The initialization code must instantiate objects implementing 
the low-level drivers as well as the YAAP classes.  Once the board is initialized, 
the implementation launches the YAAP server via a call to yaap::startServer().

If an implementation includes CPU/APU debug capability, it must have an instance of
the 'cpuDebug' YAAP class named "cpuDebug".   If it includes chipset debug capability
(NB and/or SB/FCH), in must include one or two instances of the 'csJtag' class 
named "csJtag1" and "csJtag2".  Every YAAP device must have instances of the 'system',
'device', and 'private' classes, named "system", "device", and "private" respectively.

-----------------------------------------------------------------------------------
ORGANIZATION
-----------------------------------------------------------------------------------

Source
 |
 +--Linux
 |   |
 |   +--bmc..................BMC implementation
 |       |
 |       +--hw...............BMC HAL implementation
 |
 +--Shared
     |
     +--classes..............YAAP class implementations
     +--dox..................Full documentation
     +--dox.hal..............HAL documentation subset
     +--hal..................The hardware abstraction layer headers
     +--infrastructure.......Code for handling sockets & connections
     +--local................Code for accessing YAAP functionality in local apps
     +--yaarp................Line-level encoder/decoder

-----------------------------------------------------------------------------------
HISTORY
-----------------------------------------------------------------------------------

15 April 2021 - OpenBMC Version 1.1.0
   Initial release implementing HDT remote debug functionality via BMC with OpenBMC firmware.

26 January 2012 - SDK Version 0.2-alpha
   Rolled back to YAAP 1.x functionality to ease HDT integration.

16 December 2011 - SDK Version 0.1-alpha
   Initial release implementing preliminary YAAP 2.0 functionality.
