# Copyright 2014-present Facebook. All Rights Reserved.
#
# This program file is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program in a file named COPYING; if not, write to the
# Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301 USA

VBS="0x1E720100"

ERROR[0]="OpenBMC was verified correctly"
ERROR[10]="FMC SPI0.1 (CS1) is not populated"
ERROR[11]="U-Boot on FMC SPI0.1 did not execute properly"
ERROR[20]="FMC SPI0.1 (CS1) PROM status invalid or invalid read-mode"
ERROR[30]="Invalid FDT magic number for U-Boot FIT at 0x28080000"
ERROR[31]="U-Boot FIT did not contain the /images node"
ERROR[32]="U-Boot FIT /images node has no 'firmware' subnode"
ERROR[33]="U-Boot FIT did not contain the /config node"
ERROR[34]="The ROM was not built with an embedded FDT"
ERROR[35]="U-Boot FIT did not contain the /keys node"
ERROR[36]="The itermediate keys within the U-Boot FIT are missing"
ERROR[38]="U-Boot FIT total size is invalid"
ERROR[40]="The intermediate keys could not be verified using the ROM keys"
ERROR[41]="The intermediate keys were not verified using the ROM keys"
ERROR[42]="U-Boot could not be verified using the intermediate keys"
ERROR[43]="U-Boot was not verified using the intermediate keys"
ERROR[50]="Recovery boot was forced using the force_recovery environment variable"
ERROR[60]="The rootfs and kernel FIT is invalid"

vbs_addr() {
    echo $(($VBS + $1))
}

main() {
  ROM_EXEC_ADDRESS=$(devmem $(vbs_addr 0x4) 32)
  echo "ROM executed from:       $ROM_EXEC_ADDRESS"

  ROM_KEYS=$(devmem $(vbs_addr 0x8) 32)
  echo "ROM KEK certificates:    $ROM_KEYS"

  ROM_HANDOFF=$(devmem $(vbs_addr 0x10) 32)
  echo "ROM handoff marker:      $ROM_HANDOFF"

  UBOOT_EXEC_ADDRESS=$(devmem $(vbs_addr 0x0) 32)
  echo "U-Boot executed from:    $UBOOT_EXEC_ADDRESS"

  SUBORDINATE_KEYS=$(devmem $(vbs_addr 0xC) 32)
  echo "U-Boot certificates:     $SUBORDINATE_KEYS"

  # Flags
  FORCE_RECOVERY=$(devmem $(vbs_addr 0x14) 8)
  echo "Flags force_recovery:    $FORCE_RECOVERY"

  HARDWARE_ENFORCE=$(devmem $(vbs_addr 0x15) 8)
  echo "Flags hardware_enforce:  $HARDWARE_ENFORCE"

  SOFTWARE_ENFORCE=$(devmem $(vbs_addr 0x16) 8)
  echo "Flags software_enforce:  $SOFTWARE_ENFORCE"

  RECOVERY_BOOT=$(devmem $(vbs_addr 0x17) 8)
  echo "Flags recovery_boot:     $RECOVERY_BOOT"

  RECOVERY_RETRIES=$(devmem $(vbs_addr 0x18) 8)
  echo "Flags recovery_retried:  $RECOVERY_RETRIES"

  # Errors
  ERROR_TYPE=$(devmem $(vbs_addr 0x19) 8)
  ERROR_TYPE=$((16#${ERROR_TYPE:2:2}))
  ERROR_CODE=$(devmem $(vbs_addr 0x1A) 8)
  ERROR_CODE=$((16#${ERROR_CODE:2:2}))

  echo ""
  echo "Status type ($ERROR_TYPE) code ($ERROR_CODE)"
  test "${ERROR[$ERROR_CODE]}" && echo ${ERROR[$ERROR_CODE]} || echo "The error code is unknown"
}

main
